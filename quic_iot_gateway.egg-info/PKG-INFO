Metadata-Version: 2.1
Name: quic_iot_gateway
Version: 0.1
Summary: Multi-protocol aggregation over QUIC for IoT communication.
Author-email: Anupal Mishra <anupalmishra@gmail.com>
Project-URL: Homepage, https://github.com/Anupal/quic-iot-gw
Project-URL: Issues, https://github.com/Anupal/quic-iot-gw/issues
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aioquic
Requires-Dist: aiocoap
Requires-Dist: aiomqtt
Requires-Dist: asyncio-dgram

# quic-iot-gw
Multi-protocol aggregation over QUIC for IoT communication

## QUIC server certificate and private key
Can be generated using:
```bash
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout key.pem -out cert.pem
```

## CoAP Forward Proxy
- Used to push north-bound data from CoAP clients
- Deployed using two scripts - client-proxy.py and server-proxy.py
- A QUIC connection is maintained between the proxy-pair and data is multiplexed over multiple streams.
- The traffic flow is shown below:
```
coap-server --- server-proxy ==QUIC== client-proxy --- coap-client
                      <--- 
```
- The design is strictly north-bound.

## MQTT-SN proxy
This is currently under work.


### MQTT-SN Packets
CONNECT
```
echo -ne '\x0E\x04\x00\x01\x00\x0Aclient1' | netcat -u 127.0.0.1 1883
echo -ne '\x0E\x04\x00\x01\x00\x0Aclient1' | socat - udp:127.0.0.1:1883,sp=54321
```
CONNACK
```
echo -ne '\x03\x05\x00' | netcat -u 127.0.0.1 1883
```

PUBLISH
```
echo -ne '\x10\x0C\x00\x00\x01\x00\x01Hello' | netcat -u 127.0.0.1 1883
```

PUBACK
```
echo -ne '\x07\x0D\x00\x01\x00\x01\x00' | netcat -u 127.0.0.1 1883
```

REGISTER
```
echo -ne '\x0D\x0A\x00\x00\x00\x01test' | netcat -u 127.0.0.1 1883
echo -ne '\x0D\x0A\x00\x00\x00\x01test' | socat - udp:127.0.0.1:1883,sp=54321
echo -ne '\x06\x05\x00\x01\x00\x02topic'  | socat - udp:127.0.0.1:1883,sp=54321
```
REGACK
```
echo -ne '\x08\x0B\x00\x01\x00\x01\x00' | netcat -u 127.0.0.1 1883
```

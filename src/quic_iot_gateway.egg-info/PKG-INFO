Metadata-Version: 2.1
Name: quic_iot_gateway
Version: 0.1
Summary: Multi-protocol aggregation over QUIC for IoT communication.
Author-email: Anupal Mishra <anupalmishra@gmail.com>
Project-URL: Homepage, https://github.com/Anupal/quic-iot-gw
Project-URL: Issues, https://github.com/Anupal/quic-iot-gw/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aioquic
Requires-Dist: aiocoap
Requires-Dist: aiomqtt
Requires-Dist: asyncio-dgram
Requires-Dist: colorlog

# quic-iot-gw
Multi-protocol aggregation over QUIC for IoT communication

## QUIC server certificate and private key
Can be generated using:
```bash
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout key.pem -out cert.pem
```

## CoAP Forward Proxy
- Used to push north-bound data from CoAP clients
- Deployed using two scripts - client-proxy.py and server-proxy.py
- A QUIC connection is maintained between the proxy-pair and data is multiplexed over multiple streams.
- The traffic flow is shown below:
```
coap-server --- server-proxy ==QUIC== client-proxy --- coap-client
                      <--- 
```
- The design is strictly north-bound.

## MQTT-SN proxy
This is currently under work.

### Topology

coap-server        qig-server        qig-client        coap-client 
MQTT broker                                            mqtt-sn-client

### Docker
```bash
docker run -it --rm --name qig-client -v $(pwd)/client.ini:/app/client.ini:ro qig bash -c "qig_client --config /app/client.ini"
```
